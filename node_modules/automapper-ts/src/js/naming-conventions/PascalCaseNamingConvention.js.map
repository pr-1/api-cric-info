{"version":3,"sources":["naming-conventions/PascalCaseNamingConvention.ts"],"names":[],"mappings":"AAAA,iEAAiE;AAEjE,IAAO,YAAY,CAuBlB;AAvBD,WAAO,YAAY;IACf,YAAY,CAAC;IAEhB;QAAA;YACc,wBAAmB,GAAG,kDAAkD,CAAC;YACzE,uBAAkB,GAAG,EAAE,CAAC;QAiBtC,CAAC;QAfO,0DAAqB,GAA5B,UAA6B,uBAAiC;YACpD,gCAAgC;YAChC,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,uBAAuB,CAAC,MAAM,EAAE,KAAK,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;gBACnF,MAAM,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;oBACtD,uBAAuB,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAE/D,6BAA6B;gBAC7B,8BAA8B;gBAC9B,GAAG;YACK,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACR,iCAAC;IAAD,CAnBA,AAmBC,IAAA;IAnBY,uCAA0B,6BAmBtC,CAAA;AACF,CAAC,EAvBM,YAAY,KAAZ,YAAY,QAuBlB","file":"PascalCaseNamingConvention.js","sourcesContent":["/// <reference path=\"../../../dist/automapper-interfaces.d.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n\texport class PascalCaseNamingConvention implements INamingConvention {\r\n        public splittingExpression = /(^[A-Z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\r\n        public separatorCharacter = '';\r\n\r\n\t\tpublic transformPropertyName(sourcePropertyNameParts: string[]): string {\r\n            // Transform the splitted parts.\r\n            var result = '';\r\n\r\n            for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\r\n                result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\r\n                          sourcePropertyNameParts[index].substr(1);\r\n\r\n\t\t\t\t//if (index < (length - 1)) {\r\n\t\t\t\t//    this.separatorCharacter;\r\n\t\t\t\t//}\r\n            }\r\n\r\n            return result;\r\n        }\r\n\t}\r\n}"]}