{"version":3,"sources":["AutoMapperHelper.ts"],"names":[],"mappings":"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","file":"AutoMapperHelper.js","sourcesContent":["/// <reference path=\"AutoMapperEnumerations.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * AutoMapper helper functions\r\n     */\r\n    export class AutoMapperHelper {\r\n        public static getClassName(classType: new () => any): string {\r\n            if (classType && (<any>classType).name) {\r\n                return (<any>classType).name;\r\n            }\r\n            // source: http://stackoverflow.com/a/13914278/702357\r\n            if (classType && classType.constructor) {\r\n                let className = classType.toString();\r\n                if (className) {\r\n                    // classType.toString() is \"function classType (...) { ... }\"\r\n                    let matchParts = className.match(/function\\s*(\\w+)/);\r\n                    if (matchParts && matchParts.length === 2) {\r\n                        return matchParts[1];\r\n                    }\r\n                }\r\n\r\n                // for browsers which have name property in the constructor\r\n                // of the object, such as chrome\r\n                if ((<any>classType.constructor).name) {\r\n                    return (<any>classType.constructor).name;\r\n                }\r\n\r\n                if (classType.constructor.toString()) {\r\n                    let str = classType.constructor.toString();\r\n\r\n                    let regExpMatchArray: RegExpMatchArray;\r\n                    if (str.charAt(0) === '[') {\r\n                        // executed if the return of object.constructor.toString() is \"[object objectClass]\"\r\n                        regExpMatchArray = str.match(/\\[\\w+\\s*(\\w+)\\]/);\r\n                    } else {\r\n                        // executed if the return of object.constructor.toString() is \"function objectClass () {}\"\r\n                        // (IE and Firefox)\r\n                        regExpMatchArray = str.match(/function\\s*(\\w+)/);\r\n                    }\r\n\r\n                    if (regExpMatchArray && regExpMatchArray.length === 2) {\r\n                        return regExpMatchArray[1];\r\n                    }\r\n                }\r\n            }\r\n\r\n            throw new Error(`Unable to extract class name from type '${classType}'`);\r\n        }\r\n\r\n        public static getFunctionParameters(functionStr: string): Array<string> {\r\n            const stripComments = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n            const argumentNames = /([^\\s,]+)/g;\r\n\r\n            var functionString = functionStr.replace(stripComments, '');\r\n\r\n            var functionParameterNames = functionString.slice(functionString.indexOf('(') + 1, functionString.indexOf(')')).match(argumentNames);\r\n            if (functionParameterNames === null) {\r\n                functionParameterNames = new Array<string>();\r\n            }\r\n            return functionParameterNames;\r\n        }\r\n\r\n        public static handleCurrying(func: Function, args: IArguments, closure: any): any {\r\n            const argumentsStillToCome = func.length - args.length;\r\n\r\n            // saved accumulator array\r\n            // NOTE BL this does not deep copy array objects, only the array itself; should side effects occur, please report (or refactor).\r\n            var argumentsCopy = Array.prototype.slice.apply(args);\r\n\r\n            function accumulator(moreArgs: IArguments, alreadyProvidedArgs: Array<any>, stillToCome: number): Function {\r\n                var previousAlreadyProvidedArgs = alreadyProvidedArgs.slice(0); // to reset\r\n                var previousStillToCome = stillToCome; // to reset\r\n\r\n                for (let i = 0; i < moreArgs.length; i++ , stillToCome--) {\r\n                    alreadyProvidedArgs[alreadyProvidedArgs.length] = moreArgs[i];\r\n                }\r\n\r\n                if (stillToCome - moreArgs.length <= 0) {\r\n                    var functionCallResult = func.apply(closure, alreadyProvidedArgs);\r\n\r\n                    // reset vars, so curried function can be applied to new params.\r\n                    alreadyProvidedArgs = previousAlreadyProvidedArgs;\r\n                    stillToCome = previousStillToCome;\r\n\r\n                    return functionCallResult;\r\n                } else {\r\n                    return function (): Function {\r\n                        // arguments are params, so closure bussiness is avoided.\r\n                        return accumulator(arguments, alreadyProvidedArgs.slice(0), stillToCome);\r\n                    };\r\n                }\r\n            }\r\n\r\n            return accumulator(<IArguments>(<any>[]), argumentsCopy, argumentsStillToCome);\r\n        }\r\n\r\n        public static getMappingMetadataFromTransformationFunction(destination: string, func: any, sourceMapping: boolean): IMemberMappingMetaData {\r\n            if (typeof func !== 'function') {\r\n                return {\r\n                    destination: destination,\r\n                    source: destination,\r\n                    transformation: AutoMapperHelper.getDestinationTransformation(func, false, sourceMapping, false),\r\n                    sourceMapping: sourceMapping,\r\n                    condition: null,\r\n                    ignore: false,\r\n                    async: false\r\n                };\r\n            }\r\n            var functionStr = func.toString();\r\n            var parameterNames = AutoMapperHelper.getFunctionParameters(functionStr);\r\n\r\n            var optsParamName = parameterNames.length >= 1 ? parameterNames[0] : '';\r\n\r\n            var source = sourceMapping\r\n                ? destination\r\n                : AutoMapperHelper.getMapFromString(functionStr, destination, optsParamName);\r\n\r\n            var metadata: IMemberMappingMetaData = {\r\n                destination: destination,\r\n                source: source,\r\n                transformation: AutoMapperHelper.getDestinationTransformation(func, true, sourceMapping, parameterNames.length === 2),\r\n                sourceMapping: sourceMapping,\r\n                condition: null,\r\n                ignore: AutoMapperHelper.getIgnoreFromString(functionStr, destination),\r\n                async: parameterNames.length === 2\r\n            };\r\n\r\n            // calling the member options function when used asynchronous would be too 'dangerous'.\r\n            if (!metadata.async && AutoMapperHelper.getFunctionCallIndex(functionStr, 'condition', optsParamName) >= 0) {\r\n                metadata.condition = AutoMapperHelper.getConditionFromFunction(func, source);\r\n            }\r\n\r\n            return metadata;\r\n        }\r\n\r\n        private static getDestinationTransformation(func: any, isFunction: boolean, sourceMapping: boolean, async: boolean): IDestinationTransformation {\r\n            if (!isFunction) {\r\n                return {\r\n                    transformationType: DestinationTransformationType.Constant,\r\n                    constant: func\r\n                };\r\n            }\r\n\r\n            var transformation: IDestinationTransformation;\r\n            if (sourceMapping) {\r\n                if (async) {\r\n                    transformation = {\r\n                        transformationType: DestinationTransformationType.AsyncSourceMemberOptions,\r\n                        asyncSourceMemberConfigurationOptionsFunc: func\r\n                    };\r\n                } else {\r\n                    transformation = {\r\n                        transformationType: DestinationTransformationType.SourceMemberOptions,\r\n                        sourceMemberConfigurationOptionsFunc: func\r\n                    };\r\n                }\r\n            } else {\r\n                if (async) {\r\n                    transformation = {\r\n                        transformationType: DestinationTransformationType.AsyncMemberOptions,\r\n                        asyncMemberConfigurationOptionsFunc: func\r\n                    };\r\n                } else {\r\n                    transformation = {\r\n                        transformationType: DestinationTransformationType.MemberOptions,\r\n                        memberConfigurationOptionsFunc: func\r\n                    };\r\n                }\r\n            }\r\n            return transformation;\r\n        }\r\n\r\n        private static getIgnoreFromString(functionString: string, optionsParameterName: string): boolean {\r\n            var indexOfIgnore = AutoMapperHelper.getFunctionCallIndex(functionString, 'ignore', optionsParameterName);\r\n            if (indexOfIgnore < 0) {\r\n                return false;\r\n            }\r\n\r\n            var indexOfMapFromStart = functionString.indexOf('(', indexOfIgnore) + 1;\r\n            var indexOfMapFromEnd = functionString.indexOf(')', indexOfMapFromStart);\r\n\r\n            if (indexOfMapFromStart < 0 || indexOfMapFromEnd < 0) {\r\n                return false;\r\n            }\r\n\r\n            var ignoreString = functionString.substring(indexOfMapFromStart, indexOfMapFromEnd).replace(/\\r/g, '').replace(/\\n/g, '').trim();\r\n            return ignoreString === null || ignoreString === ''\r\n                ? true // <optionsParameterName>.ignore()\r\n                : false; // <optionsParameterName>.ignore(<ignoreString> -> unexpected content)\r\n        }\r\n\r\n        private static getMapFromString(functionString: string, defaultValue: string, optionsParameterName: string): string {\r\n            var indexOfMapFrom = AutoMapperHelper.getFunctionCallIndex(functionString, 'mapFrom', optionsParameterName);\r\n            if (indexOfMapFrom < 0) {\r\n                return defaultValue;\r\n            }\r\n\r\n            var indexOfMapFromStart = functionString.indexOf('(', indexOfMapFrom) + 1;\r\n            var indexOfMapFromEnd = functionString.indexOf(')', indexOfMapFromStart);\r\n\r\n            if (indexOfMapFromStart < 0 || indexOfMapFromEnd < 0) {\r\n                return defaultValue;\r\n            }\r\n\r\n            var mapFromString = functionString.substring(indexOfMapFromStart, indexOfMapFromEnd).replace(/'/g, '').replace(/\"/g, '').trim();\r\n            return mapFromString === null || mapFromString === ''\r\n                ? defaultValue\r\n                : mapFromString;\r\n        }\r\n\r\n        private static getFunctionCallIndex(functionString: string, functionToLookFor: string, optionsParameterName: string): number {\r\n            var indexOfFunctionCall = functionString.indexOf(optionsParameterName + '.' + functionToLookFor);\r\n            if (indexOfFunctionCall < 0) {\r\n                indexOfFunctionCall = functionString.indexOf('.' + functionToLookFor);\r\n            }\r\n\r\n            return indexOfFunctionCall;\r\n        }\r\n\r\n        private static getConditionFromFunction(func: Function, sourceProperty: string): ((sourceObject: any) => boolean) {\r\n            // Since we are calling the valueOrFunction function to determine whether to ignore or map from another property, we\r\n            // want to prevent the call to be error prone when the end user uses the '(opts)=> opts.sourceObject.sourcePropertyName'\r\n            // syntax. We don't actually have a source object when creating a mapping; therefore, we 'stub' a source object for the\r\n            // function call.\r\n            var sourceObject: any = {};\r\n            sourceObject[sourceProperty] = {};\r\n\r\n            var condition: (sourceObject: any) => boolean;\r\n\r\n            // calling the function will result in calling our stubbed ignore() and mapFrom() functions if used inside the function.\r\n            const configFuncOptions: IMemberConfigurationOptions = {\r\n                ignore: (): void => {\r\n                    // do nothing\r\n                },\r\n                condition: (predicate: ((sourceObject: any) => boolean)): void => {\r\n                    condition = predicate;\r\n                },\r\n                mapFrom: (sourcePropertyName: string): void => {\r\n                    // do nothing\r\n                },\r\n                sourceObject: sourceObject,\r\n                sourcePropertyName: sourceProperty,\r\n                intermediatePropertyValue: {}\r\n            };\r\n\r\n            try {\r\n                func(configFuncOptions);\r\n            } catch (exc) {\r\n                // do not handle by default.\r\n            }\r\n\r\n            return condition;\r\n        }\r\n    }\r\n}"]}