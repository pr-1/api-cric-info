{"version":3,"sources":["AutoMapperValidator.ts"],"names":[],"mappings":"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","file":"AutoMapperValidator.js","sourcesContent":["/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\r\n/// <reference path=\"AutoMapperHelper.ts\" />\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * AutoMapper configuration validator.\r\n     */\r\n    export class AutoMapperValidator {\r\n        /**\r\n         * Validates mapping configuration by dry-running. Since JS does not\r\n         * fully support typing, it only checks if properties match on both\r\n         * sides. The function needs IMapping.sourceTypeClass and\r\n         * IMapping.destinationTypeClass to function.\r\n         * @param {boolean} strictMode Whether or not to fail when properties\r\n         *                             sourceTypeClass or destinationTypeClass\r\n         *                             are unavailable.\r\n         */\r\n        public static assertConfigurationIsValid(mappings: any, strictMode: boolean): void {\r\n            for (var key in mappings) {\r\n                if (!mappings.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                AutoMapperValidator.assertMappingConfiguration(mappings[key], strictMode);\r\n            }\r\n        }\r\n\r\n        private static assertMappingConfiguration(mapping: IMapping, strictMode: boolean): void {\r\n            var mappingKey = `${mapping.sourceKey}=>${mapping.destinationKey}`;\r\n\r\n            var sourceType = mapping.sourceTypeClass;\r\n            var destinationType = mapping.destinationTypeClass;\r\n\r\n            var sourceClassName = sourceType ? AutoMapperHelper.getClassName(sourceType) : undefined;\r\n            var destinationClassName = destinationType ? AutoMapperHelper.getClassName(destinationType) : undefined;\r\n\r\n            if (!sourceType || !destinationType) {\r\n                if (strictMode === false) {\r\n                    return;\r\n                }\r\n\r\n                throw new Error(`Mapping '${mappingKey}' cannot be validated, since mapping.sourceType or mapping.destinationType are unspecified.`);\r\n            }\r\n\r\n            var tryHandle = (errorMessage: string): void => {\r\n                if (errorMessage) {\r\n                    throw new Error(`Mapping '${mappingKey}' is invalid: ${errorMessage} (source: '${sourceClassName}', destination: '${destinationClassName}').`);\r\n                }\r\n            };\r\n\r\n            var validatedMembers = new Array<string>();\r\n\r\n            var srcObj = new sourceType();\r\n            var dstObj = new destinationType();\r\n\r\n            // walk member mappings\r\n            for (let property of mapping.properties) {\r\n\r\n\r\n                tryHandle(AutoMapperValidator.validatePropertyMapping(property, property.name, srcObj, dstObj));\r\n                validatedMembers.push(property.name);\r\n            }\r\n\r\n            // walk source members\r\n            for (let srcMember in srcObj) {\r\n                if (!srcObj.hasOwnProperty(srcMember)) {\r\n                    continue;\r\n                }\r\n\r\n                if (validatedMembers.indexOf(srcMember) >= 0) {\r\n                    // already validated\r\n                    continue;\r\n                }\r\n\r\n                tryHandle(AutoMapperValidator.validateProperty(srcMember, dstObj));\r\n                validatedMembers.push(srcMember);\r\n            }\r\n\r\n            // walk destination members\r\n            for (let dstMember in dstObj) {\r\n                if (!dstObj.hasOwnProperty(dstMember)) {\r\n                    continue;\r\n                }\r\n\r\n                if (validatedMembers.indexOf(dstMember) >= 0) {\r\n                    // already validated\r\n                    continue;\r\n                }\r\n\r\n                tryHandle(`Destination member '${dstMember}' does not exist on source type`);\r\n            }\r\n            // /* tslint:disable */\r\n            // console.error(key);\r\n            // /* tslint:enable */\r\n        }\r\n\r\n        private static validatePropertyMapping(propertyMapping: ISourceProperty, member: any, srcObj: any, dstObj: any): string {\r\n            // awkward way of locating sourceMapping ;) ...\r\n            let destinationProperty = AutoMapperValidator.getDestinationProperty(propertyMapping.destinationPropertyName, propertyMapping);\r\n\r\n            return destinationProperty.sourceMapping\r\n                ? AutoMapperValidator.validateSourcePropertyMapping(propertyMapping, destinationProperty, member, srcObj, dstObj)\r\n                : AutoMapperValidator.validateDestinationPropertyMapping(propertyMapping, destinationProperty, member, srcObj, dstObj);\r\n        }\r\n\r\n        private static validateSourcePropertyMapping(\r\n            ropertyMapping: ISourceProperty,\r\n            destinationProperty: IDestinationProperty,\r\n            member: any,\r\n            srcObj: any,\r\n            dstObj: any): string {\r\n            // a member for which configuration is provided, should exist.\r\n            if (!srcObj.hasOwnProperty(member)) {\r\n                return `Source member '${member}' is configured, but does not exist on source type`;\r\n            }\r\n\r\n            // an ignored source member should not exist on the destination type.\r\n            if (destinationProperty.ignore) {\r\n                if (dstObj.hasOwnProperty(member)) {\r\n                    return `Source member '${member}' is ignored, but does exist on destination type`;\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            // a mapped source member should exist on the destination type.\r\n            if (!dstObj.hasOwnProperty(member)) {\r\n                return `Source member '${member}' is configured to be mapped, but does not exist on destination type`;\r\n            }\r\n\r\n            //var dstMember = propertyMapping.destinationProperty;\r\n\r\n            return undefined;\r\n        }\r\n\r\n        private static validateDestinationPropertyMapping(\r\n            propertyMapping: ISourceProperty,\r\n            destinationProperty: IDestinationProperty,\r\n            member: any,\r\n            srcObj: any,\r\n            dstObj: any): string {\r\n            // a member for which configuration is provided, should exist.\r\n            if (!dstObj.hasOwnProperty(destinationProperty.name)) {\r\n                return `Destination member '${destinationProperty.destinationPropertyName}' is configured, but does not exist on destination type`;\r\n            }\r\n\r\n            // an ignored destination member should not exist on the source type.\r\n            if (destinationProperty.ignore) {\r\n                if (srcObj.hasOwnProperty(member)) {\r\n                    return `Destination member '${member}' is ignored, but does exist on source type`;\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            // a mapped destination member should exist on the source type.\r\n            if (!srcObj.hasOwnProperty(member)) {\r\n                return `Destination member '${member}' is configured to be mapped, but does not exist on source type`;\r\n            }\r\n\r\n            //var dstMember = propertyMapping.destinationProperty;\r\n\r\n            return undefined;\r\n        }\r\n\r\n        private static validateProperty(srcMember: any, dstObj: any): string {\r\n            if (!dstObj.hasOwnProperty(srcMember)) {\r\n                return `Source member '${srcMember}' is configured to be mapped, but does not exist on destination type`;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        private static getDestinationProperty(destinationPropertyName: string, existingSource: ISourceProperty): IDestinationProperty {\r\n            if (existingSource.destination) {\r\n                return existingSource.destination;\r\n            }\r\n\r\n            if (existingSource.children) {\r\n                for (let child of existingSource.children) {\r\n                    var destination = this.getDestinationProperty(destinationPropertyName, child);\r\n                    if (destination) {\r\n                        return destination;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n}"]}