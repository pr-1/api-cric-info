{"version":3,"sources":["Profile.ts"],"names":[],"mappings":"AAAA,8DAA8D;AAC9D,mDAAmD;AAEnD,IAAO,YAAY,CA4ClB;AA5CD,WAAO,YAAY;IACf,YAAY,CAAC;IAEb;;OAEG;IACH;QAAA;QAqCA,CAAC;QA3BG;;;WAGG;QACI,2BAAS,GAAhB;YACI,aAAa;QACjB,CAAC;QAED;;;;;WAKG;QACO,2BAAS,GAAnB,UAAoB,SAAiB,EAAE,cAAsB;YACzD,IAAI,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAEtD,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;gBACpE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAClB,2DAA2D;oBAC3D,QAAQ,CAAC,KAAK,CAAC,GAAM,IAAI,CAAC,WAAW,UAAK,QAAQ,CAAC,KAAK,CAAG,CAAC;gBAChE,CAAC;YACL,CAAC;YAED,sFAAsF;YACtF,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAC;QACL,cAAC;IAAD,CArCA,AAqCC,IAAA;IArCY,oBAAO,UAqCnB,CAAA;AACL,CAAC,EA5CM,YAAY,KAAZ,YAAY,QA4ClB","file":"Profile.js","sourcesContent":["/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\r\n/// <reference path=\"../../src/ts/AutoMapper.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * Converts source type to destination type instead of normal member mapping\r\n     */\r\n    export class Profile implements IProfile {\r\n        /** Profile name */\r\n        public profileName: string;\r\n\r\n        /** Naming convention for source members */\r\n        public sourceMemberNamingConvention: INamingConvention;\r\n\r\n        /** Naming convention for destination members */\r\n        public destinationMemberNamingConvention: INamingConvention;\r\n\r\n        /**\r\n         * Implement this method in a derived class and call the CreateMap method to associate that map with this profile.\r\n         * Avoid calling the AutoMapper class / automapper instance from this method.\r\n         */\r\n        public configure(): void {\r\n            // do nothing\r\n        }\r\n\r\n        /**\r\n         * Create a mapping profile.\r\n         * @param {string} sourceKey The map source key.\r\n         * @param {string} destinationKey The map destination key.\r\n         * @returns {Core.ICreateMapFluentFunctions}\r\n         */\r\n        protected createMap(sourceKey: string, destinationKey: string): ICreateMapFluentFunctions {\r\n            var argsCopy = Array.prototype.slice.apply(arguments);\r\n\r\n            for (var index = 0, length = argsCopy.length; index < length; index++) {\r\n                if (argsCopy[index]) {\r\n                    // prefix sourceKey and destinationKey with 'profileName=>'\r\n                    argsCopy[index] = `${this.profileName}=>${argsCopy[index]}`;\r\n                }\r\n            }\r\n\r\n            // pass through using arguments to keep createMap's currying support fully functional.\r\n            return automapper.createMap.apply(automapper, argsCopy);\r\n        }\r\n    }\r\n}"]}