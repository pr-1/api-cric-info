{"version":3,"sources":["TypeConverter.ts"],"names":[],"mappings":"AAAA,8DAA8D;AAE9D,IAAO,YAAY,CAkBlB;AAlBD,WAAO,YAAY;IACf,YAAY,CAAC;IAEb;;OAEG;IACH;QAAA;QAWA,CAAC;QAVG;;;;WAIG;QACI,+BAAO,GAAd,UAAe,iBAAqC;YAChD,qFAAqF;YACrF,mFAAmF;YACnF,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;QAClH,CAAC;QACL,oBAAC;IAAD,CAXA,AAWC,IAAA;IAXY,0BAAa,gBAWzB,CAAA;AACL,CAAC,EAlBM,YAAY,KAAZ,YAAY,QAkBlB","file":"TypeConverter.js","sourcesContent":["/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * Converts source type to destination type instead of normal member mapping\r\n     */\r\n    export class TypeConverter implements ITypeConverter {\r\n        /**\r\n         * Performs conversion from source to destination type.\r\n         * @param {IResolutionContext} resolutionContext Resolution context.\r\n         * @returns {any} Destination object.\r\n         */\r\n        public convert(resolutionContext: IResolutionContext): any {\r\n            // NOTE BL Unfortunately, TypeScript/JavaScript do not support abstract base classes.\r\n            //         This is just one way around, please convince me about a better solution.\r\n            throw new Error('The TypeConverter.convert method is abstract. Use a TypeConverter extension class instead.');\r\n        }\r\n    }\r\n}"]}